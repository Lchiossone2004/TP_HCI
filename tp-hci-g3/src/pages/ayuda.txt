<template>
  <div class="expenses-chart-container">
    <div class="chart-legend-row">
      <div class="chart-wrapper">
        <canvas ref="chartRef"></canvas>
      </div>
      <div class="custom-legend">
        <div v-for="(cat, i) in categories" :key="cat.key" class="legend-row">
          <span class="legend-color" :style="{ backgroundColor: chartColors[i] }"></span>
          <span class="material-symbols-rounded legend-icon">{{ cat.icon }}</span>
          <span class="legend-label">{{ cat.label }}</span>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, onMounted, watch, computed } from 'vue';
import { Chart } from 'chart.js/auto';

const props = defineProps({
  monthlyActivities: { type: Array, default: () => [] }, // Solo gastos mensuales
});

const chartRef = ref(null);
let chartInstance = null;

const chartColors = ['#1E3A8A', '#3B82F6', '#60A5FA', '#93C5FD', '#BFDBFE'];

// CategorizaciÃ³n
const categoryMap = [
  { key: 'comida', label: 'Comida', icon: 'restaurant', match: ['restaurant', 'Pedidos Ya'] },
  { key: 'compras', label: 'Compras', icon: 'shopping_bag', match: ['shopping_bag'] },
  { key: 'supermercado', label: 'Supermercado', icon: 'shopping_cart', match: ['shopping_cart', 'supermercado'] },
  { key: 'servicios', label: 'Servicios', icon: 'receipt_long', match: ['event', 'servicio', 'factura'] },
  { key: 'varios', label: 'Varios', icon: 'list', match: [] },
];

// Procesa los gastos mensuales
const categories = computed(() => {
  const result = categoryMap.map(cat => ({ ...cat, amount: 0 }));
  props.monthlyActivities.forEach(act => {
    if (act.amount < 0) {
      let found = false;
      for (const cat of result) {
        if (cat.match.some(m => act.icon?.toLowerCase().includes(m) || act.title?.toLowerCase().includes(m))) {
          cat.amount += Math.abs(act.amount);
          found = true;
          break;
        }
      }
      if (!found) {
        result.find(c => c.key === 'varios').amount += Math.abs(act.amount);
      }
    }
  });
  return result;
});

function renderChart() {
  if (chartInstance) chartInstance.destroy();
  const ctx = chartRef.value.getContext('2d');
  chartInstance = new Chart(ctx, {
    type: 'doughnut',
    data: {
      labels: categories.value.map(c => c.label),
      datasets: [{
        data: categories.value.map(c => c.amount),
        backgroundColor: chartColors,
        borderWidth: 0,
      }],
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      plugins: { legend: { display: false } },
      cutout: '65%',
    },
  });
}

onMounted(renderChart);
watch(categories, renderChart);
</script>

<style scoped>
.expenses-chart-container {
  background: #fff;
  border-radius: 20px;
  padding: 1.5;
  box-sizing: border-box;
  width: 100%;
  heigth: 350px;
  display: flex;
  flex-direction: column;
  align-items: center;
  position: relative;
}
.chart-legend-row {
  display: flex;
  flex-direction: row;
  align-items: center;
  width: 100%;
  justify-content: center;
  gap: 1.5rem;
  margin-bottom: 1rem;
}
.chart-wrapper {
  width: 220px;
  height: 220px;
  min-width: 220px;
  min-height: 220px;
  max-width: 220px;
  max-height: 220px;
  display: flex;
  align-items: center;
  justify-content: center;
}
canvas {
  width: 220px !important;
  height: 220px !important;
  display: block;
}
.custom-legend {
  display: flex;
  flex-direction: column;
  gap: 0.7rem;
  margin-left: 0.5rem;
}
.legend-row {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  font-size: 1rem;
  font-weight: bold;
}
.legend-color {
  width: 18px;
  height: 18px;
  border-radius: 4px;
  display: inline-block;
}
.legend-icon {
  font-size: 1.3rem;
  color: #1E3A8A;
}
.legend-label {
  color: #03192C;
}
</style>